{
	"info": {
		"_postman_id": "9230c795-9d9e-449f-ba38-88dfb4d83cff",
		"name": "Udacity Coffee Shop",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13373242"
	},
	"item": [
		{
			"name": "Barista",
			"item": [
				{
					"name": "GET /drinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request completes with a successful code\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Response body contains text drinks\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"drinks\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/drinks",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"drinks"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /drinks-detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request completes with a successful code\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Response body contains high-level property drinks\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"drinks\");",
									"});",
									"",
									"pm.test(\"Response body is valid JSON\", function () {",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response returns with 2 drinks\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.drinks).to.have.lengthOf(2);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/drinks-detail",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"drinks-detail"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Manager",
			"item": [
				{
					"name": "GET /drinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request completes with a successful code\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Response body contains text drinks\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"drinks\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/drinks",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"drinks"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /drinks-detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request completes with a successful code\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Response body contains high-level property drinks\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"drinks\");",
									"});",
									"",
									"pm.test(\"Response body is valid JSON\", function () {",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response returns with 2 drinks\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.drinks).to.have.lengthOf(2);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/drinks-detail",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"drinks-detail"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /drinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request completes with a successful code\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Response body is valid JSON\", function () {",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response body property 'drinks'\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"drinks\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\":\"mocha\",\n  \"recipe\": [{\"name\": \"mocha\", \"color\": \"white\", \"parts\": 1}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/drinks",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"drinks"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH /drinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request completes with a successful code\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Response body is valid JSON\", function () {",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response returns with 1 updated drink\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.drinks).to.have.lengthOf(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\":\"milk\",\n  \"recipe\": [{\"name\": \"milk\", \"color\": \"white\", \"parts\": 1}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/drinks/1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"drinks",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /drinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete request returns with a 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Response body has property 'delete'\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"delete\");",
									"});",
									"",
									"pm.test(\"Response body is valid JSON\", function () {",
									"     pm.response.to.be.json;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/drinks/1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"drinks",
								"1"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IlNyN2hvNVA2Qi13UE85ajZRVEo2TiJ9.eyJpc3MiOiJodHRwczovL2Rldi00ZXpsdG5iY2V4N3V2bXA1LnVzLmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw2MzY5ODAxZWNmOTFkMmE3NmU5NDM3ODIiLCJhdWQiOiJmZnNuZCIsImlhdCI6MTY2ODc2Mzc1NiwiZXhwIjoxNjY4ODUwMTU2LCJhenAiOiJWMmNtcDhBSUN4NHlYTjNwZlROblQzcHJuamhXV3g4OSIsInNjb3BlIjoiIiwicGVybWlzc2lvbnMiOlsiZGVsZXRlOmRyaW5rcyIsImdldDpkcmlua3MiLCJnZXQ6ZHJpbmtzLWRldGFpbCIsInBhdGNoOmRyaW5rcyIsInBvc3Q6ZHJpbmtzIl19.YbGTd2UITyDBgpsT3ZsAzbqLVTyyw4N-l_8RdveVzjVqf2hWQVjt-d_2UkDjZCrkpptKlLLyxnNab5A-DqMuOWFTaSilUwL05IK703kiW1AaMuLFQ18h9xzYQDQVTe80UdbibvqWkx2Z28Y013JHWVbwbNN3PuKVxCdZ433hIfnJcI5rQad7mQipmRG7wwQPHVzzklSy-dVpit3rW0BBSDthQlz41yaMjx8Lk4wD0c9MiHBbAAPBxWdKTBKCD15mpe3Eo3GXPYOooj5S1xYDXRq_xg1QgwqhpQvwU8Nllb2oXWQkhkRbusVpyIicz5Fj5AShtsyS9sKy9WFCx9M12g",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}